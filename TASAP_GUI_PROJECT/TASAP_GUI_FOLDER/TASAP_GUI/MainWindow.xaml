<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        xmlns:local="clr-namespace:TASAP_GUI"
        xmlns:Wpf="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf" x:Class="TASAP_GUI.MainWindow"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        TextElement.FontWeight="Regular"
        TextElement.FontSize="13"
        TextOptions.TextFormattingMode="Ideal" 
        TextOptions.TextRenderingMode="Auto"        
        Background="{DynamicResource MaterialDesignPaper}"
        FontFamily="{DynamicResource MaterialDesignFont}"
        mc:Ignorable="d"
        Title="MainWindow" 
        Height="600" 
        Width="968"
        ResizeMode="NoResize"
        Topmost="True"
        WindowStyle="None"
        BorderBrush="White"
        BorderThickness="1.5"
        WindowStartupLocation="CenterScreen">

    <Window.Resources>

        <!--// Toggle Button Style Template //-->

        <ImageBrush x:Key="tb_mouse_over"
                    ImageSource="Assets/tgBtn_MouseOver.png"/>

        <!--// Text font style //-->

        <Style x:Key="font_style" TargetType="{x:Type TextBlock}">

            <Setter Property="FontFamily"
                    Value="Fonts/Roboto-Light.ttf #Roboto"/>

            <Setter Property="VerticalAlignment"
                    Value="Center"/>

            <Setter Property="HorizontalAlignment"
                    Value="Left"/>

            <Setter Property="Foreground"
                    Value="White"/>

            <Setter Property="FontSize"
                    Value="20"/>

        </Style>

        <!--// Tooltip Style Template //-->

        <Style TargetType="{x:Type ToolTip}" x:Key="tt_style">

            <Setter Property="Placement" Value="Right"/>
            <Setter Property="Height" Value="40"/>
            <Setter Property="Width" Value="100"/>
            <Setter Property="Margin" Value="20,0,0,0"/>
            <Setter Property="Background" Value="#4A5668"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontFamily" Value="Fonts/Roboto-Light.ttf #Roboto"/>
            <Setter Property="FontSize" Value="16"/>
            <Setter Property="PlacementRectangle" Value="60,0,0,0"/>
            <Setter Property="HorizontalOffset" Value="15"/>
            <Setter Property="VerticalOffset" Value="6"/>
            <Setter Property="HasDropShadow" Value="True"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>

        </Style>

        <!--// App Close Button Style Template //-->

        <ImageBrush x:Key="CloseBtn_MouseOver" ImageSource="Assets/closeBtn_MouseOver.png"/>

        <Style x:Key="Close_btn" TargetType="{x:Type Button}">

            <Setter Property="Template">

                <Setter.Value>

                    <ControlTemplate TargetType="{x:Type Button}">

                        <Border x:Name="button"
                                BorderThickness="0"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True"/>

                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver"
                                     Value="True">

                                <Setter Property="Background"
                                        TargetName="button"
                                        Value="{StaticResource CloseBtn_MouseOver}"/>

                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>

                </Setter.Value>

            </Setter>

        </Style>




        <Style x:Key="tb_style" TargetType="{x:Type ToggleButton}">

            <Setter Property="Template">

                <Setter.Value>

                    <ControlTemplate TargetType="{x:Type ToggleButton}">

                        <Border  x:Name="border"
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 Background="{TemplateBinding Background}"
                                 SnapsToDevicePixels="True"/>

                        <ControlTemplate.Triggers>

                            <Trigger Property="IsMouseOver" Value="true">

                                <Setter Property="Background"
                                        TargetName="border"
                                        Value="{StaticResource tb_mouse_over}"/>

                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="{StaticResource tb_mouse_over}"/>

                            </Trigger>

                            <Trigger Property="IsChecked" Value="true">

                                <Setter Property="Background"
                                        TargetName="border"
                                        Value="{StaticResource tb_mouse_over}"/>

                                <Setter Property="BorderBrush"
                                        TargetName="border"
                                        Value="{StaticResource tb_mouse_over}"/>

                            </Trigger>

                        </ControlTemplate.Triggers>

                    </ControlTemplate>

                </Setter.Value>

            </Setter>

        </Style>

    </Window.Resources>

    <Grid x:Name="GUI_int" Background="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}">

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="60"/>
            <ColumnDefinition Width="30"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="33"/>
            <RowDefinition Height="57"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Button x:Name="CloseBtn"
                        Grid.Column="1"
                        Grid.Row="1"
                        BorderThickness="0"
                        Style="{StaticResource Close_btn}" Click="CloseBtn_Click" Margin="10,7,10,8">

            <Button.Background>

                <ImageBrush ImageSource="Assets/closeBtn_default.png"/>

            </Button.Background>

        </Button>



        <StackPanel x:Name="Putorcall" Orientation="Horizontal" Margin="0,4,317,53" HorizontalAlignment="Right" Width="116" Grid.RowSpan="2">
            <TextBlock x:Name="Put" IsEnabled="False" Margin="0,9,12,0"><Run Text="Put"/></TextBlock>
            <ToggleButton x:Name="OptionType"  Checked="OptionType_Checked" Unchecked="OptionType_Unchecked" 
            Style="{StaticResource MaterialDesignSwitchToggleButton}"
            ToolTip="MaterialDesignSwitchToggleButton with Custom Track Background" materialDesign:ToggleButtonAssist.SwitchTrackOnBackground="Green" materialDesign:ToggleButtonAssist.SwitchTrackOffBackground="Red"/>
            <TextBlock x:Name="Call" IsEnabled="False" Margin="12,9,0,0"><Run Text="Call"/></TextBlock>

        </StackPanel>

        <StackPanel x:Name="Result" Orientation="Horizontal" Margin="365,4,100,506" Grid.Row="1" Grid.RowSpan="2" >
            <Button x:Name="Launch" Click="Launch_Click" Width="120" Height="40 " 
                        Style="{StaticResource MaterialDesignRaisedButton}" Content="Launch"/>
            <Label Margin= "10,0,0,0" Foreground="Black" VerticalAlignment="Center" Content="Result :"/>
            <Label Margin="5,14.5,0,0" Foreground="Black" x:Name="PayoffVal"/>

        </StackPanel>

        <Grid x:Name="GraphGrid" HorizontalAlignment="Left" Height="261" VerticalAlignment="Top" Width="958" Margin="0,239,0,0" Grid.Row="2" Grid.ColumnSpan="3" >
            <Wpf:CartesianChart x:Name="DataChart" Margin="20,0,10,0">
                <Wpf:CartesianChart.AxisY>
                    <Wpf:Axis Title="Greecs" MinValue="0"></Wpf:Axis>
                </Wpf:CartesianChart.AxisY>
                <Wpf:CartesianChart.AxisX>
                    <Wpf:Axis Title="Parameter" MinValue="0"></Wpf:Axis>
                </Wpf:CartesianChart.AxisX>
            </Wpf:CartesianChart>
        </Grid>
        <Grid x:Name="ParamsGridLeft" HorizontalAlignment="Left" Height="230" Margin="80,4,0,0" Grid.Row="2" VerticalAlignment="Top" Width="399">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <StackPanel x:Name="SP_StrikePrice" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center">
                <RadioButton Name="Strike_Price" Style="{StaticResource MaterialDesignTabRadioButton}" Click="Strike_Price_Click"  Content="Strike Price"/>
                <TextBox IsEnabled="True" x:Name="StrikePriceVal"  Margin="5,5,0,0">50.0</TextBox>
                <Label Margin="30,1,0,0">Min :</Label>
                <TextBox IsEnabled="False" x:Name="Strike_PriceValmin"  Margin="8,3,0,0">0</TextBox>
                <Label Margin="70,1,0,0">Max :</Label>
                <TextBox IsEnabled="False" x:Name="Strike_PriceValmax"  Margin="2,3,0,0">0</TextBox>
            </StackPanel>
            <StackPanel x:Name="SP_StockPrice" Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Center">
                <RadioButton Name="Stock_Price" Style="{StaticResource MaterialDesignTabRadioButton}"  Click="Stock_Price_Click" Content="Stock Price"/>
                <TextBox IsEnabled="True" x:Name="StockPriceVal"  Margin="5,5,0,0">50.0</TextBox>
                <Label Margin="30,1,0,0">Min :</Label>
                <TextBox IsEnabled="False" x:Name="Stock_PriceValmin"  Margin="8,3,0,0">0</TextBox>
                <Label Margin="70,1,0,0">Max :</Label>
                <TextBox IsEnabled="False" x:Name="Stock_PriceValmax"  Margin="2,3,0,0">0</TextBox>

            </StackPanel>
            <StackPanel x:Name="SP_TimeToMaturity" Grid.Row="2" Orientation="Horizontal" VerticalAlignment="Center">
                <RadioButton IsEnabled="False"  Style="{StaticResource MaterialDesignTabRadioButton}" Content="Maturity"/>
                <ComboBox Name="MaturityCb"  materialDesign:HintAssist.Hint="Search" materialDesign:HintAssist.HintOpacity=".26" IsEditable="True" Width="auto" DropDownClosed="MaturityCb_Selected">
                    <ComboBoxItem>1 month</ComboBoxItem>
                    <ComboBoxItem>3 months</ComboBoxItem>
                    <ComboBoxItem>6 months</ComboBoxItem>
                    <ComboBoxItem>1 year</ComboBoxItem>
                    <ComboBoxItem>2 years</ComboBoxItem>
                    <ComboBoxItem>5 years</ComboBoxItem>
                    <ComboBoxItem>10 years</ComboBoxItem>
                    <ComboBoxItem>12 years</ComboBoxItem>
                    <ComboBoxItem>15 years</ComboBoxItem>
                    <ComboBoxItem>20 years</ComboBoxItem>
                    <ComboBoxItem>30 years</ComboBoxItem>
                </ComboBox>
                <TextBlock IsEnabled="False" x:Name="MaturityVal"  Margin="50,5,0,0">6.0</TextBlock>

            </StackPanel>
        </Grid>
        <Grid x:Name="ParamsGridRight" HorizontalAlignment="Left" Height="230" Margin="522,4,0,0" Grid.Row="2" VerticalAlignment="Top" Width="410" Grid.ColumnSpan="2">
            <Grid.Resources>
                <Style TargetType="{x:Type CheckBox}">
                    <Setter Property="Margin" Value="0,0,8,0"/>
                </Style>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>

            <StackPanel x:Name="SP_RiskFreeRate" Grid.Row="0" Orientation="Horizontal" VerticalAlignment="Center">
                <RadioButton IsEnabled="False"  Style="{StaticResource MaterialDesignTabRadioButton}" Content="Risk Free Rate" Foreground="Black"/>
                <TextBox IsEnabled="True" x:Name="RfRateVal"  Margin="5,5,0,0">0.0</TextBox>
            </StackPanel>

            <StackPanel x:Name="SP_Volatitlity" Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Center">
                <RadioButton Name="Volatility" Style="{StaticResource MaterialDesignTabRadioButton}"  Click="Volatility_Click" Content="Volatility"/>
                <TextBox IsEnabled="True" x:Name="VolatilityVal"  Margin="5,5,0,0">50.0</TextBox>
                <Label Margin="30,1,0,0">Min :</Label>
                <TextBox IsEnabled="False" x:Name="VolatilityValmin"  Margin="8,3,0,0">0</TextBox>
                <Label Margin="40,1,0,0">Max :</Label>
                <TextBox IsEnabled="False" x:Name="VolatilityValmax"  Margin="2,3,0,0">0</TextBox>
            </StackPanel>

            <StackPanel x:Name="GreecsPanel" Grid.Row="2" Orientation="Horizontal" VerticalAlignment="Center">
                <ListBox Name="yParam" IsEnabled="False"  SelectionMode="Extended" Style="{StaticResource MaterialDesignToolToggleFlatListBox}" Background="{x:Null}">
                    <ListBox.ToolTip>
                        <StackPanel>
                            <TextBlock
                                Text="MaterialDesignToolToggleListBox" />
                            <TextBlock
                                Text="Multiple selection" />
                            <TextBlock
                                Text="ListBoxAssist.IsToggle allows more natural toggle behaviour" />
                        </StackPanel>
                    </ListBox.ToolTip>
                    <ListBoxItem x:Name="DeltaCheck" Unselected="DeltaCheck_Unselected" Selected="DeltaCheck_Selected">
                        <Label>Delta</Label>
                    </ListBoxItem>
                    <ListBoxItem x:Name="GammaCheck" Unselected="GammaCheck_Unselected" Selected="GammaCheck_Selected">
                        <Label>Gamma</Label>
                    </ListBoxItem>
                    <ListBoxItem x:Name="VegaCheck" Unselected="VegaCheck_Unselected" Selected="VegaCheck_Selected">
                        <Label>Vega</Label>
                    </ListBoxItem>
                    <ListBoxItem x:Name="ThetaCheck" Unselected="ThetaCheck_Unselected" Selected="ThetaCheck_Selected">
                        <Label>Theta</Label>
                    </ListBoxItem>
                    <ListBoxItem x:Name="RhoCheck" Unselected="RhoCheck_Unselected" Selected="RhoCheck_Selected">
                        <Label>Rho</Label>
                    </ListBoxItem>
                    <ListBoxItem x:Name="Payoff" Unselected="Payoff_Unselected" Selected="Payoff_Selected">
                        <Label>Payoff</Label>
                    </ListBoxItem>
                </ListBox>
            </StackPanel>



        </Grid>
    </Grid>
</Window>
